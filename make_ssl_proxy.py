#!/usr/bin/env python

# script to make web container proxy config for nginx with certbot.
# Jeroen van Oorschot 2016-2017
# CoCo - e.t.s.v. Thor

import sys
import subprocess
from time import sleep

print("This file generates a config file for a proxy server for a container. \
    Next it enables a http server to let letsencrypt authenticate the domain.\
     Then a certificate is obtained and installed. \
     Finally the temporary server is deleted and the final config is placed. \
     The config uses a lot of includes from /etc/nginx/snippets")

DEFAULT_BODY_SIZE='1M'
WEBROOT = "/var/www/"
CERT_PATH = "/etc/letsencrypt/live/"
WEB_USER = "nginx"
SERVER_PATH = "/etc/nginx/"
TEMP_SERVER_NAME = SERVER_PATH + "sites-enabled/temp-letsencrypt"
NGINX_RELOAD_COMMAND = ["nginx", "-s", "reload"]

def good():
    q=str(raw_input("Please check the output. Looking good? (y/n): ")).strip()
    if q != "y":
        sys.exit()

###############
#Input reading#
###############

#container name
name=str(raw_input("Name of the web container: ")).strip()
if name[:3] != "web":
    print("Name should start with 'web'")
    q=raw_input("Use this name anyway? (y/n)")
    if q != "y":
        sys.exit()

#container ip, allow only "10.x.x.x" addresses.
ip=str(raw_input('IP address of container: ')).strip()
if ip.count('.')!=3 or len(ip)<8 or ip[:3] != "10.":
    print("Invalid IP address supplied")
    sys.exit()

#max body size
body_size=str(raw_input('Max body size (e.g. 3M): ')).strip()
if len(body_size)>4 or len(body_size)==1:
    print("Invalid size supplied")
    sys.exit()

if len(body_size)==0:
    print("Defaulting to "+DEFAULT_BODY_SIZE)
    body_size = DEFAULT_BODY_SIZE

#server_name
server_name = str(raw_input('Space separated list of server names: ')).strip()
if len(server_name)==0:
    print("Invalid server_name supplied")
    sys.exit()

server_name_list = server_name.split()
print("Domains parsed as:")
for server_name_single in server_name_list:
    print(server_name_single)
first_domain = server_name_list[0]
##############
#Config build#
##############
config_server = """
# Config for: """ + name + """
# Generated by jvo-python-nginx-ssl-config-generator

# Redirect 80 to 443
server{
	server_name """ + server_name + """;
	include snippets/http_redirect.inc;
}
# Https proxy
server{
	server_name """ + server_name + """;
	root """ + WEBROOT + name + """; #root is needed for letsencrypt challenge
	include snippets/ssl_config.inc;
	client_max_body_size """ + body_size + """;

	ssl_certificate """ + CERT_PATH + first_domain + """/fullchain.pem;
	ssl_certificate_key """ + CERT_PATH + first_domain + """/privkey.pem;

	location / {
		proxy_pass	http://""" + ip + """;
		include snippets/proxy_params.inc;
	}
}
"""
print("Config now looks like:")
print(config_server)

good()

#############################################
#Temporary server for letsencrypt first cert#
#############################################
print("Setting temp server for letsencrypt to get initial certificate.")
temp_config_server="""
# This is a temporary http server, for validating a domain for letsencrypt.
# This should not be used outside the make_ssl_proxy.py script.

server{
	server_name """ + server_name + """;
	listen 80;

	# for letsencrypt challenge
	location ~ /.well-known {
        	allow all;
	}

	root """ + WEBROOT + name + """;
}
"""
file = open(TEMP_SERVER_NAME,"w")
file.write(temp_config_server)
file.flush()
file.close()
subprocess.check_output(['nginx','-t'])
good()
##################
#Generating certs#
##################

#make dir for letsencrypt challenge
folder = WEBROOT+name
subprocess.call(["mkdir", folder])
subprocess.call(["chgrp", WEB_USER,folder])
subprocess.call(["chmod", "770", folder])

print("reloading nginx...")
subprocess.check_output(NGINX_RELOAD_COMMAND)

#generate cert
command = "certbot certonly -n --webroot -w " + WEBROOT + name
for server_name_single in server_name_list:
    command += " -d " + server_name_single

#shell because a string is passed
try:
    subprocess.check_output(command, shell=True)
except:
    print("Certbot failed");

print("If certbot did not produce output, continue.\
 \n If certbot failed, exit the script and run nginx -s reload and \
 the above certbot command manually. Then rerun this script.")
good()

######################################
#Remove temp server and install final#
######################################

# remove temp server
subprocess.call(["rm",TEMP_SERVER_NAME])
# add new
file = open(SERVER_PATH + "sites-available/" + name,"w")
file.write(config_server)
file.flush()
file.close()
subprocess.call(["ln","-s","../sites-available/" + name, "/etc/nginx/sites-enabled/" + name])
subprocess.check_output(['nginx','-t'])
good()
print("reloading nginx...")
subprocess.check_output(NGINX_RELOAD_COMMAND)
print("Everyting done!")
